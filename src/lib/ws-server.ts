// lib/ws-server.ts
// import { WebSocketServer } from 'ws';
// import { Server } from 'http';
// import { consumeExchange } from './rabbitmq';
// import {EXCHANGE_SERVICE_DATA, SERVICE_NAME_IN_DATA} from './envVar'

// let started = false;

// export function startWebSocketServer(server: Server) {
//   if (started) return;

//   const wss = new WebSocketServer({ server, path: "/ws/zigbee_test" });

//   wss.on('connection', (ws) => {
//     console.log('üîå Client connected');
//   });

//   console.log("data")

//   consumeExchange(EXCHANGE_SERVICE_DATA ?? 'exchangeServiceData', 'fanout', (msg) => {
//     console.log(`data services: ${msg}`)
//     const message = JSON.stringify({type: "message_service", data: msg})
//     wss.clients.forEach((client) => {
//       if (client.readyState === 1) {
//         client.send(message);
//       }
//     });
//   });

//   started = true;
//   console.log('‚úÖ WebSocket server started');
// }

import { WebSocketServer } from 'ws';
import { Server } from 'http';
import { consumeExchange } from './rabbitmq';
import { EXCHANGE_SERVICE_DATA, PREFIX_API } from './envVar';

let wss: WebSocketServer | null = null;

export function startWebSocketServer(server: Server) {
  if (wss) {
    console.log('‚ö†Ô∏è WebSocketServer —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ —Å–æ–∑–¥–∞—ë–º');
    return wss;
  }

  console.log('üü¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ WebSocket —Å–µ—Ä–≤–µ—Ä–∞...');
  wss = new WebSocketServer({ server, path: `/ws/${PREFIX_API}` });

  wss.on('connection', (ws, req) => {
    console.log(`üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω [${new Date().toISOString()}]`);
    console.log(`   URL: ${req.url}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${wss?.clients.size}`);

    ws.on('close', () => {
      console.log(`‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω. –û—Å—Ç–∞–ª–æ—Å—å: ${wss?.clients.size}`);
    });
  });

  wss.on('error', (err) => {
    console.error('üí• –û—à–∏–±–∫–∞ WS —Å–µ—Ä–≤–µ—Ä–∞:', err);
  });

  consumeExchange(EXCHANGE_SERVICE_DATA ?? 'exchangeServiceData', 'fanout', (msg) => {
    console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ RabbitMQ: ${msg.substring(0, 100)}...`);
    const message = JSON.stringify({ type: "message_service", data: msg });

    const active = Array.from(wss?.clients || []).filter(c => c.readyState === 1);
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${active.length} –∫–ª–∏–µ–Ω—Ç–∞–º`);

    for (const client of active) {
      client.send(message);
    }
  });

  console.log('‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
  return wss;
}